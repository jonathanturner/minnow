// FASTA benchmark - translated from the CSharp version


feature Frequency
  c : char
  p : double

  def Frequency(c_val:char, p_val:double)
    c = c_val
    p = p_val
  end
end

def ALU : string
  return "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG" + ...
    "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA" + ...
    "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT" + ...
    "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA" + ...
    "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG" + ...
    "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC" + ...
    "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"
end

def IUB : Array[Frequency] 
  $a = [new Frequency ('a', 0.27), new Frequency ('c', 0.12), new Frequency ('g', 0.12), new Frequency ('t', 0.27), ...
    new Frequency ('B', 0.02), new Frequency ('D', 0.02), new Frequency ('H', 0.02), new Frequency ('K', 0.02), ...
    new Frequency ('M', 0.02), new Frequency ('N', 0.02), new Frequency ('R', 0.02), new Frequency ('S', 0.02), ...
    new Frequency ('V', 0.02), new Frequency ('W', 0.02), new Frequency ('Y', 0.02)]

  $cp = 0.0
  for $i = 0 to a.size()-1
    cp += a[i].p
    a[i].p = cp;
  end

  return a
end

def HomoSapiens : Array[Frequency]
  $a = [new Frequency ('a', 0.3029549426680), new Frequency ('c', 0.1979883004921), ...
    new Frequency ('g', 0.1975473066391), new Frequency ('t', 0.3015094502008)]

  $cp = 0.0
  for $i = 0 to a.size()-1
    cp += a[i].p
    a[i].p = cp;
  end

  return a
end

actor Game
  seed : int
  index : int

  def make_cumulative(a : Array[Frequency])
    $cp = 0.0
    for $i = 0 to a.size()-1
      cp += a[i].p
      a[i].p = cp;
    end
  end

  def random(max:double) : double
    seed = (seed * 3877 + 29573) % 139968
    return max * (seed.to_double() * (1.0 / 139968))
  end

  def select_random(a : Array[Frequency]) : char
    r:double = random(1.0)
    for $i = 0 to (a.size()-1)
      if (r < a[i].p)
        return a[i].c
      end
    end
    $index = a.size() - 1
    return a[index].c
  end

  def make_random_fasta(id:string, desc:string, a : Array[Frequency], n:int)
    index = 0
    $m = 0
    print << '>' << id << ' ' << desc << '\n'
    $buf = ""

    while (n > 0)
      if (n < 60)
        m = n
      else
        m = 60
      end

      buf = ""
      for $i = 0 to m-1
        buf.push(select_random(a))
      end
      i

      buf.push('\n')
      print(buf)
      n -= 60
    end
  end

  def make_repeat_fasta(id:string, desc:string, alu : string, n:int)
    index = 0
    $m = 0
    $k = 0
    $kn = alu.size()
    $buf = ""

    print << '>' << id << ' ' << desc << '\n'

    while (n > 0)
      if (n < 60)
        m = n
      else
        m = 60
      end

      buf = ""
      for $i = 0 to m-1
        if k == kn
          k = 0
        end

        buf.push(alu[k])
        k += 1
      end
      i
      buf.push('\n')
      print(buf)
      n -= 60
    end
  end

  action run_game(n:int)
    $alu = ALU()
    $homosapiens = HomoSapiens()
    seed = 42

    make_repeat_fasta("ONE", "Homo sapiens alu", ALU(), n*2)
    make_random_fasta("TWO", "IUB ambiguity codes", IUB(), n*3)
    make_random_fasta("THREE", "Homo sapiens frequency", HomoSapiens(), n*5)
    Sys.exit()
  end
end

action main(args : Array[string])
  $g = spawn Game()
  g::run_game(args[0].to_int())
end